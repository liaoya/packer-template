# Refer https://github.com/CentOS/sig-cloud-instance-build/blob/master/cloudimg/CentOS-8-x86_64-Azure.ks

# Install OS instead of upgrade
install
# Keyboard layouts
# old format: keyboard us
# new format:
keyboard --vckeymap=us --xlayouts='us'
# Root password
rootpw --plaintext oracle
# System language
lang en_US

# System authorization information
auth  --useshadow  --passalgo=sha512
# Use CDROM installation media
cdrom
# Use graphical install
graphical
# Run the Setup Agent on first boot
firstboot --enable
# SELinux configuration
selinux --disabled
# Do not configure the X Window System
skipx

# System services
services --disabled="chronyd" --enabled="sshd,NetworkManager,systemd-resolved"
ignoredisk --only-use=vda
# Firewall configuration
firewall --disabled
# Network information
network  --bootproto=dhcp --device=None
# Reboot after installation
reboot
# System timezone
timezone Etc/UTC --isUtc
# System bootloader configuration
bootloader --append="crashkernel=auto console=tty1 console=ttyS0,115200 net.ifnames=0 biosdevname=0" --location=mbr
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel --drives=vda
# Disk partitioning information
part / --fstype="xfs" --grow --size=1

%packages
@^minimal-environment
chrony
sudo
parted
-dracut-config-rescue
-postfix
-NetworkManager-config-server
openssh-server
kernel
dnf-utils
rng-tools
cracklib
cracklib-dicts

# pull firmware packages out
-aic94xx-firmware
-alsa-firmware
-alsa-lib
-alsa-tools-firmware
-ivtv-firmware
-iwl1000-firmware
-iwl100-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-libertas-sd8686-firmware
-libertas-sd8787-firmware
-libertas-usb8388-firmware

# Some things from @core we can do without in a minimal install
-biosdevname
-plymouth
-iprutils

# enable rootfs resize on boot
cloud-utils-growpart
gdisk

%end

%post --log=/var/log/anaconda/post-install.log --erroronfail

#!/bin/bash

dnf -C -y remove linux-firmware

# Remove firewalld; it is required to be present for install/image building.
# but we dont ship it in cloud
dnf -C -y remove firewalld --setopt="clean_requirements_on_remove=1"
sed -i '/^#NAutoVTs=.*/ a\
NAutoVTs=0' /etc/systemd/logind.conf

cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# For cloud images, 'eth0' _is_ the predictable device name, since
# we don't want to be tied to specific virtual (!) hardware
rm -f /etc/udev/rules.d/70*
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules
rm -f /etc/sysconfig/network-scripts/ifcfg-ens*

# simple eth0 config, again not hard-coded to the build hardware
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
USERCTL="yes"
PEERDNS="yes"
IPV6INIT="no"
PERSISTENT_DHCLIENT="1"
EOF

dnf clean all

echo "Fixing SELinux contexts."
touch /var/log/cron
touch /var/log/boot.log
mkdir -p /var/cache/yum

grep -s -q -w "UseDNS yes" /etc/ssh/sshd_config && sed -i "/UseDNS/d" /etc/ssh/sshd_config && sed -i "/^# no default banner path/i UseDNS no" /etc/ssh/sshd_config
grep -s -q -w "GSSAPIAuthentication yes" /etc/ssh/sshd_config && sed -i "/GSSAPIAuthentication/d" /etc/ssh/sshd_config && sed -i "/^# no default banner path/i GSSAPIAuthentication no" /etc/ssh/sshd_config
grep -s -q -w "GSSAPICleanupCredentials yes" /etc/ssh/sshd_config && sed -i "/GSSAPICleanupCredentials/d" /etc/ssh/sshd_config && sed -i "/^# no default banner path/i GSSAPICleanupCredentials no" /etc/ssh/sshd_config

sed -i "s/^.*requiretty/#Defaults requiretty/" /etc/sudoers
sed -i '/XAUTHORITY"$/a Defaults    env_keep += "HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY NO_PROXY"' /etc/sudoers
sed -i '/XAUTHORITY"$/a Defaults    env_keep += "http_proxy https_proxy ftp_proxy rsync_proxy no_proxy"' /etc/sudoers
sed -i '/^Defaults    secure_path/ s/$/:\/usr\/local\/sbin/:\/usr\/local\/bin/' /etc/sudoers

# delete any logs that have built up during the install
find /var/log/ -name "*.log" -exec rm -f {} \;
rm -fr /tmp/*

%end
